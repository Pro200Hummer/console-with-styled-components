{"version":3,"sources":["components/Title.tsx","components/Flex.tsx","components/Line.tsx","components/Console.tsx","components/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledTitle","styled","h1","props","color","theme","colors","primary","Title","StyledFlex","div","direction","align","justify","margin","Flex","StyledLine","Line","StyledConsole","textarea","Console","lines","map","line","onKeyPress","onKeyPressHandler","StyledButton","button","css","background","outlined","Button","AppWrapper","App","useState","setLines","e","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Global","createGlobalStyle","ReactDOM","render","secondary","document","getElementById"],"mappings":"wPAOMA,EAAcC,IAAOC,GAAV,2CACN,SAAAC,GAAK,OAAIA,EAAMC,OAASD,EAAME,MAAMC,OAAOC,WAKvCC,EAFe,SAAAL,GAAK,OAAI,cAACH,EAAD,eAAiBG,KCDlDM,EAAaR,IAAOS,IAAV,oIAEI,SAAAP,GAAK,OAAIA,EAAMQ,WAAa,SAC/B,SAAAR,GAAK,OAAIA,EAAMS,OAAS,aACpB,SAAAT,GAAK,OAAIA,EAAMU,SAAW,aACnC,SAAAV,GAAK,OAAIA,EAAMW,QAAU,OAKtBC,EAFa,SAAAZ,GAAK,OAAI,cAACM,EAAD,eAAgBN,KCX/Ca,EAAaf,IAAOS,IAAV,+DAEL,SAAAP,GAAK,OAAIA,EAAMC,OAASD,EAAME,MAAMC,OAAOC,WAKvCU,EAFa,SAAAd,GAAK,OAAI,cAACa,EAAD,eAAgBb,KCD/Ce,EAAgBjB,IAAOkB,SAAV,sNAQR,SAAAhB,GAAK,OAAIA,EAAMC,OAASD,EAAME,MAAMC,OAAOC,WAkBvCa,EAXmB,SAAAjB,GAC9B,OACI,eAAC,EAAD,WACI,cAAC,EAAD,CAAMQ,UAAU,SAASG,OAAO,MAAhC,SACKX,EAAMkB,MAAMC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAMnB,MAAOD,EAAMC,MAAnB,SAA2BmB,SAExD,cAACL,EAAD,aAAeM,WAAYrB,EAAMsB,mBAAuBtB,QCrB9DuB,EAAezB,IAAO0B,OAAV,sUAOF,SAAAxB,GAAK,OAAIA,EAAMS,OAAS,aAEpC,SAAAT,GAAK,OAAIA,EAAMI,SAAWqB,YAAjB,qEACA,SAAAzB,GAAK,OAAIA,EAAMC,OAASD,EAAME,MAAMC,OAAOC,WACtC,SAAAJ,GAAK,OAAIA,EAAM0B,YAAc,cAE3C,SAAA1B,GAAK,OAAIA,EAAM2B,UAAYF,YAAlB,yGACA,SAAAzB,GAAK,OAAIA,EAAMC,OAASD,EAAME,MAAMC,OAAOC,WAChC,SAAAJ,GAAK,OAAIA,EAAMC,OAASD,EAAME,MAAMC,OAAOC,cAkBpDwB,EAJiB,SAAA5B,GAC5B,OAAO,cAACuB,EAAD,eAAkBvB,KClCvB6B,EAAa/B,IAAOS,IAAV,kHAOHuB,EAAM,WAAO,IAAD,EACKC,mBAAmB,CAAC,kBADzB,mBACdb,EADc,KACPc,EADO,KASrB,OAAO,eAACH,EAAD,WACH,cAAC,EAAD,CAAMnB,QAAQ,SAAd,SACI,cAAC,EAAD,yDAEJ,eAAC,EAAD,CAAMF,UAAU,SAAhB,UACI,cAAC,EAAD,CAASU,MAAOA,EAAOI,kBAXL,SAACW,GACV,UAAVA,EAAEC,KACDF,EAAS,GAAD,mBAAKd,GAAL,CAAY,sBAUpB,cAAC,EAAD,CAAQS,UAAQ,EAAClB,MAAM,WAAvB,yBCfG0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHRQ,EAASC,YAAH,yIAgBZC,IAASC,OACL,eAAC,IAAD,CAAe7C,MARL,CACVC,OAAQ,CACJC,QAAS,QACT4C,UAAW,QAKf,UACI,cAACJ,EAAD,IACA,cAAC,EAAD,OAEJK,SAASC,eAAe,SAE5Bf,M","file":"static/js/main.dac807f2.chunk.js","sourcesContent":["import React, {FC} from 'react';\r\nimport styled from \"styled-components\";\r\n\r\ninterface TitleProps {\r\n    color?: string\r\n}\r\n\r\nconst StyledTitle = styled.h1<TitleProps>`\r\n  color: ${props => props.color || props.theme.colors.primary};\r\n`;\r\n\r\nconst Title: FC<TitleProps> = props => <StyledTitle {...props}/>\r\n\r\nexport default Title\r\n","import React, {FC} from 'react';\r\nimport styled from \"styled-components\";\r\n\r\ninterface FlexProps {\r\n    direction?: string\r\n    align?: string\r\n    justify?: string\r\n    margin?: string\r\n}\r\n\r\nconst StyledFlex = styled.div<FlexProps>`\r\n  display: flex;\r\n  flex-direction: ${props => props.direction || 'row'};\r\n  align-items: ${props => props.align || 'stretch'};\r\n  justify-content: ${props => props.justify || 'stretch'};\r\n  margin: ${props => props.margin || '0'};\r\n`;\r\n\r\nconst Flex: FC<FlexProps> = props => <StyledFlex {...props}/>\r\n\r\nexport default Flex;","import React, {FC} from 'react';\r\nimport styled from \"styled-components\";\r\n\r\ninterface LineProps {\r\n    color?: string\r\n}\r\n\r\nconst StyledLine = styled.div<LineProps>`\r\n  font-size: 24px;\r\n  color: ${props => props.color || props.theme.colors.primary};\r\n`;\r\n\r\nconst Line: FC<LineProps> = props => <StyledLine {...props}/>\r\n\r\nexport default Line;","import React, {FC, KeyboardEvent} from 'react';\r\nimport styled from \"styled-components\";\r\nimport Flex from \"./Flex\";\r\nimport Line from \"./Line\";\r\n\r\ninterface ConsoleProps {\r\n    lines: string[]\r\n    onKeyPressHandler: (e: KeyboardEvent<HTMLTextAreaElement>) => void\r\n    color?: string\r\n}\r\n\r\nconst StyledConsole = styled.textarea<ConsoleProps>`\r\n  width: 100%;\r\n  height: 70vh;\r\n  font-size: 24px;\r\n  margin-top: 5px;\r\n  background: #000000;\r\n  border: none;\r\n  resize: none;\r\n  color: ${props => props.color || props.theme.colors.primary};\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst Console: FC<ConsoleProps> = props => {\r\n    return (\r\n        <Flex>\r\n            <Flex direction='column' margin='5px'>\r\n                {props.lines.map(line => <Line color={props.color}>{line}</Line>)}\r\n            </Flex>\r\n            <StyledConsole onKeyPress={props.onKeyPressHandler} {...props}/>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Console;","import React, {FC} from 'react';\r\nimport styled, {css} from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n    align?: string\r\n    color?: string\r\n    background?: string\r\n    primary?: boolean\r\n    outlined?: boolean\r\n}\r\n\r\nconst StyledButton = styled.button<ButtonProps>`\r\n  border: none;\r\n  padding: 10px 15px;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  transform: scale(1);\r\n  transition: transform 0.5s;\r\n  align-self: ${props => props.align || 'stretch'};\r\n\r\n  ${props => props.primary && css<ButtonProps>`\r\n    color: ${props => props.color || props.theme.colors.primary};\r\n    background: ${props => props.background || 'white'};\r\n  `}\r\n  ${props => props.outlined && css<ButtonProps>`\r\n    color: ${props => props.color || props.theme.colors.primary};\r\n    border: 1px solid ${props => props.color || props.theme.colors.primary};\r\n    background: transparent;\r\n  `}\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &:hover{\r\n    transform: scale(1.1);\r\n  }\r\n  &:active{\r\n    transform: scale(1);\r\n  }\r\n`;\r\n\r\nconst Button: FC<ButtonProps> = props => {\r\n    return <StyledButton {...props}/>\r\n};\r\n\r\nexport default Button;","import React, {KeyboardEvent, useState} from 'react';\nimport styled from \"styled-components\";\nimport Title from \"./components/Title\";\nimport Flex from \"./components/Flex\";\nimport Console from './components/Console';\nimport Button from \"./components/Button\";\n\nconst AppWrapper = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  padding: 2rem;\n  background-color: #000000;\n`;\n\nexport const App = () => {\n    const [lines, setLines] = useState<string[]>(['C/users/user>']);\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if(e.key === \"Enter\"){\n            setLines([...lines, 'C/users/user>'])\n        }\n    }\n\n    return <AppWrapper>\n        <Flex justify='center'>\n            <Title>Console imitation with styled components</Title>\n        </Flex>\n        <Flex direction='column'>\n            <Console lines={lines} onKeyPressHandler={onKeyPressHandler}/>\n            <Button outlined align='flex-end'>\n                Send\n            </Button>\n        </Flex>\n    </AppWrapper>\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createGlobalStyle, ThemeProvider} from \"styled-components\";\n\nconst Global = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: Consolas, serif;\n  }\n`;\n\nconst theme = {\n    colors: {\n        primary: 'green',\n        secondary: 'red'\n    }\n}\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <Global/>\n        <App/>\n    </ThemeProvider>,\n    document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}